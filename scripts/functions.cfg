#!/bin/bash

# persistent variables

file_dbnvmconf="/etc/asterisk/dbn_voicemail.conf"
file_dbnextconf="/etc/asterisk/dbn_extensions.conf"
file_dbnrecpin="/var/lib/asterisk/CCdbn/recording_passwords.csv"
dir_ccdbn="/var/lib/asterisk/CCdbn"
inFile=
custContext=
userFirst=
userLast=
userDid=
dbnNum=
non_intmode=no
bulk_mode=no
flag_mode=no
verbose_mode=no
help_mode=no


#error handling
# exit when any command fails
#`set -e

# keep track of the last executed command
#trap 'last_command=$current_command; current_command=$BASH_COMMAND' DEBUG
# echo an error message before exiting
#trap 'echo "\"${last_command}\" command filed with exit code $?."' EXIT

# common functions

_set_vars () {
while getopts i:c:F:L:D:d:bNvh flag
do
	case "${flag}" in
		i) inFile=${OPTARG}; flag_mode="yes";;
		c) custContext=${OPTARG}; flag_mode="yes";;
		F) userFirst=${OPTARG}; flag_mode="yes";;
		L) userLast=${OPTARG}; flag_mode="yes";;
		D) userDid=${OPTARG}; flag_mode="yes";;
		d) dbnNum=${OPTARG}; flag_mode="yes";;
		b) bulk_mode="yes";;
		N) non_intmode="yes";; 
		v) verbose_mode="yes";; 
		h) help_mode="yes";;
		?) echo "invalid flag" >&2; exit 1;;
	esac
done
}

_dbn_backup () {
	 /etc/dbntool/scripts/log_backup.sh
}
_file_check () {
	echo "checking if file exists..."
	if [[ -f "$1" ]] ; then
		echo "$1 found..."
		return 0
	else
		echo "$1 not found"
		return 1
	fi
}

_validate_infile () {
input="$(file "$1")"
if [[ ! $input =~ ^.*"ASCII text"$ ]] ; then
	echo "WARNING: PREP FILE FIRST TO REMOVE EOL AND BOM CHARACTERS, exiting"
	return 1
elif grep -q -E "[0-9]{10}[$,]" $1 ; then
	echo "numbers not in correct 11 digit 1NPANXXNNNN format, exiting"
	return 1
elif grep -q -e "[0-9]{11}[,]" $1 ; then
	echo "Columns not in order, ARRANGE COLUMNS BY FIRST,LAST,NUMBER, exiting"
	return 1
fi
}

_cust_dircheck () {
	echo "Checking for Cust directory..."
	if [[ -d "/var/lib/asterisk/CCdbn/$1" ]] ; then
		echo "$1 found..."
		return 0
	else
		echo "$1 not found..."
		return 1
	fi
	
}
_cust_contextcheck () {
	if [[ $# -lt 2 ]] ; then
		echo "set file to search within for grep as second input"
		return 2
	else
		echo "checking for existing $1 context in $2 file"
		if grep -q "$1" $2 ; then
			if [[ $(grep $1 $2 | wc -l) -gt 1 ]] ; then
				echo "grep returned more than one result"
				return 3
			fi
			echo "Customer $1 exists" | sed 's/\\//g'
			return 0
		else
			echo "Customer $1 not found"
			return 1
		fi
	fi

}
_backup_check () {
	read -p "Backup existing configuration?" -n 1 -r
	if [[ $REPLY =~ ^[yY]$ ]] ; then
		echo
		_dbn_backup
	else
		echo
		echo "moving on..."
	fi
}
_set_inFile () {
	if [[ -z $1 ]] ; then
		echo "no input file present"
		return 1
	else
		inFile=$1
		inFilePath="$(pwd $inFile)"
	fi
}

_set_custContext () {
	read -p " Customer context? " custContext
}


_fix_inFile () {
	dbntool file fix-name $1
	$inFile="$(echo "$inFile" | sed 's/ //g')"
}

_set_permissions(){
chown -Rc :asterisk $1
chmod -Rc 775 $1
}


_help_search(){
	sed -n -e "/^### $1/,/^###$/p" /etc/dbntool/readme.txt
}

_cleanup_files () {
rm /tmp/remove* 2> /dev/null
rm /tmp/accounts-temp.csv 2> /dev/null
rm /tmp/voicemail-temp.csv 2> /dev/null
rm /tmp/dbntool* 2> /dev/null
}

